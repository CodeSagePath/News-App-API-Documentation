openapi: 3.1.0
info:
  version: 1.0.0
  title: Example.com
  termsOfService: https://example.com/terms/
  contact:
    email: rishigarg185@gmail.com
    url: http://example.com/contact
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    This is an **example** API to demonstrate features of the OpenAPI specification.

    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in 

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    It also demonstrates features of the
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    and 

    the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond
    the standard OpenAPI syntax, we use a few 

    [vendor
    extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
tags:
  - name: Users
    description: Operations about users.
  - name: Articles
    description: Operations about articles.
servers:
  - url: https://{tenant}/api/v1
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://example.com/api/v1
paths:
  /users:
    post:
      tags:
        - Users
      description: Create a User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Fetch User
      description: Fetch a user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
    post:
      tags:
        - Users
      summary: Update a User
      description: Update details of a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The id for user that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        '200':
          description: Details Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user supplied
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
    delete:
      tags:
        - Users
      summary: Delete a User
      description: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id for user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Invalid user supplied
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
  /articles:
    get:
      tags:
        - Articles
      summary: Fetch Article
      description: Fetch an article by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '403':
          description: Forbidden
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
    post:
      tags:
        - Articles
      summary: Update a User
      description: Update article of a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The id for user that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        description: Updated user object
        required: true
      responses:
        '200':
          description: Details Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid user supplied
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
    delete:
      tags:
        - Articles
      summary: Delete a User
      description: Delete an Article
      operationId: deleteArticle
      parameters:
        - name: id
          in: path
          description: The id for article to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Article deleted successfully
        '400':
          description: Invalid user supplied
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
components:
  schemas:
    Email:
      description: User email address
      type: string
      example: john.smith@example.com
    UserAddress:
      type: object
      properties:
        city:
          description: User city name
          type: string
          example: Bangalore
        state:
          description: User state name
          type: string
          example: Karnataka
        postal_code:
          description: User postal code
          type: string
          example: '1234'
    CreateUserRequest:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          example: John09
        first_name:
          description: User first name
          type: string
          example: John
        last_name:
          description: User last name
          type: string
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
        age:
          description: User age
          type: integer
          format: int32
          example: 20
        gender:
          description: User gender
          type: string
          example: M
        address:
          $ref: '#/components/schemas/UserAddress'
        phone_number:
          description: User phone number
          type: string
          example: 1234567890
    User:
      type: object
      properties:
        id:
          description: Server generated unique id
          type: string
          example: user_417K3BFfLV
        username:
          description: User supplied username
          type: string
          example: John09
        first_name:
          description: User first name
          type: string
          example: John
        last_name:
          description: User last name
          type: string
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
        age:
          description: User age
          type: integer
          format: int32
          example: 20
        gender:
          description: User gender
          type: string
          example: M
        address:
          $ref: '#/components/schemas/UserAddress'
        phone_number:
          description: User phone number
          type: string
          example: +91-1234567890
    Problem:
      type: object
      additionalProperties: true
      minProperties: 1
      description: The Problem Details JSON Object [[RFC7807](https://tools.ietf.org/html/rfc7807)].
      properties:
        type:
          type: string
          description: A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".
          format: uri
        title:
          type: string
          description: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
        status:
          type: integer
          description: The HTTP status code.
          minimum: 400
          maximum: 599
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
    DateFormat:
      type: object
      properties:
        year:
          description: Article publish year
          type: integer
          format: int32
          example: 2023
        month:
          description: Article publish month
          type: integer
          format: int32
          example: 2
        day:
          description: Article publish day
          type: integer
          format: int32
          example: 10
        hour:
          description: Article publish hour (time)
          type: integer
          format: int32
          example: 22
        minute:
          description: Article publish minute (time)
          type: integer
          format: int32
          example: 46
    Article:
      type: object
      properties:
        id:
          description: Server generated unique id
          type: string
          example: article_417K3BFfLV
        title:
          type: string
          description: Article title
          example: Bard Released
        language:
          type: string
          description: Article language
          example: English
        publisher:
          type: string
          description: Article publisher name
          example: BCC
        topic:
          type: string
          description: Article topic category
          example: technology
        date_time:
          $ref: '#/components/schemas/DateFormat'
  responses:
    Problem:
      description: Problem
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
